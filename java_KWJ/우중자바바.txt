♥♥♥♥♥♥♥♥♥♥♥1일차♥♥♥♥♥♥♥♥♥♥
변수
 - 변수 선언을 할 수 있다
 - 변수의 값을 콘솔에 출력할 수 있다.
 - 콘솔에서 입력받아 변수에 값을 저장할 수 있다.

변수타입 변수명 = 값;
변수타입 종류
 - 정수 : byte, short, int long, char
 - 실수 : float, double
 - 논리 : boolean
 - 문자열 : String
타입변환
 - 자동
 - 강제
콘솔 출력 : println
콘솔 입력 : Scanner


♥♥♥♥♥♥♥♥♥2일차♥♥♥♥♥♥♥♥♥♥♥♥


연산자
- 연산자 종류와 그에 따른 결과를 예측할 수 있다
- 연산자 종류

- 증감연산자 : 숫자
  - 최종적으로 1증가/1감소 =>
    전위형/후위형에 상관없이 연산이 끝난 다음에 변수의 값이 1증가/1감소
  - 전위형 : ++변수명, 증가하고 동작
  - 후위형 : 변수명++, 동작하고 증가

- 산술연산자 : 숫자
  - / : 정수 / 정수 => 정수(소수점이 사라짐)
  - 타입 변환을 통해 정수 / 정수를 실수 / 정수로 변환 후 계산
  - % : 나누었을 때 나머지가로 표현되면 사용

- 비교연산자 : 참 또는 거짓
  - 크기 비교

- 논리연산자 : 참 또는 거짓
  - && : ~하고, 둘다 참인경우만 참, 나머진 거짓
  - ||    : ~하거나, 둘다 거짓인 경우만 거짓, 나머진 참
  - !     : 반대, 참이면 거짓, 거짓이면 참

- 조건선택연산자 : 알수 없음(숫자, 참 또는 거짓 모두 가능)

조건문
- 조건문의 종류와 사용법을 익힌다.
- 조건문을 언제 사용하는지 이해할 수 있다.
- ~하면 ...해라
  ~ : 조건식, 면 앞부분이 조건식
  ... : 실행문, 면 뒷부분이 실행문
- if문, switch문
- if문 기본 문법1
if(조건식){
	실행문;
}
- 조건식이 참이면 실행문을 실행하고, 조건식이 거짓이면 아무것도 안함

- if문 기본 문법2
if(조건식){
	실행문1;
} else {
	실행문2;
}
- 조건식이 참이면 실행문1을 실행하고, 조건식이 거짓이면 실행문2를 실행

- 기본 문법3
if(조건식1){
	실행문1;
} else if(조건식2){
	실행문2;
} else{
	실행문3;
}
- 조건식1이 참이면 실행문1을 실행하고,
  조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행하고,
  조건식1과 조건식2가 모두 거짓이면 실행문3을 실행해라

- if문에서 else나 else if는 있을 수도 있고 없을 수도 있지만 if는 필수!


♥♥♥♥♥♥♥♥♥3일차♥♥♥♥♥♥♥♥♥♥♥♥

1. 변수
 - 변수 선언을 할 수 있다.
 - 변수를 콘솔에 출력할 수 있다.
 - 콘솔에서 입력받아 변수에 저장할 수 있다.

 - 변수 선언 방법
타입 변수명;
타입 변수명 = 값;
타입 변수명1, 변수명2;
 - 타입 종류
  - 정수    : int, char
  - 실수    : float, double
  - 논리형 : boolean
  - 문자열 : String
 - 변수명 작성 규칙(필수)
 - 변수명 작성 관례(필수x)
 - System.out.println
 - Scanner

2. 연산자
 - 연산자 종류를 알고, 그 결과를 예측할 수 있다.
 - 산술(+-*/%) : 숫자
  - / : 정수 / 정수 => 정수(소수점이 버려짐)
  - 강제 타입 변환을 이용하여 소수점을 살림
  - % : 나머지를 구하는 연산자
  - /, %는 0으로 나누면 안됨
 - 비교 : <, >, <=, >=, ==, !=
  - =와 ==를 혼동하지 말자
  - 결과가 참 또는 거짓
 - 조건식 : 결과가 참 또는 거짓이 되는 식
 - 논리 : &&, ||, ! 
  - && : ~하고, 둘다 참이면 참, 나머진 거짓
  - || : ~하거나, 둘다 거짓이면 거짓, 나머진 참
  - ! : 반대, 참이면 거짓, 거짓이면 참
 - 증감연산자 : 정수
  - 최종적으로 1증가/1감소
  - 전위형 : ++변수명,--변수명, 증가/감소하고 동작
  - 후위형 : 변수명++,변수명--, 동작하고 증가/감소
 - 대입연산자 : = 
  - 오른쪽에 있는 값을 왼쪽에 저장
  - 왼쪽에는 변수가 1개와야 한다
 - 조건선택연산자 : (조건식) ? 참 : 거짓;

3. 조건문
 - 조건문을 사용해야 하는 상황을 알고, 조건문을 사용할 수 있다.
 - 상황에 따라 결과가 달라질 때 조건문을 사용
 - ~하면 ...해라
 - 모든 조건문은 if문으로 표현 가능
 - if문, switch문
 - if문 기본문법
 - 조건식1이 참이면 실행문1을 실행하고, 
   조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행하고,
   조건식1, 조건식2가 모두 거짓이면 실행문3을 실행해라
 - else : 현재 위치를 기준으로 위에 있는 조건식이 거짓이면으로 해석
if(조건식1){
	실행문1;
} else if(조건식2){
	실행문2;
} else{
	실행문3;
}	

 - 이중 if문
  - if문의 실행문으로 if문이 또 오는 경우
  - 이중 if문은 단일 if문으로도 표현할 수 있다
if(조건식1){
	if(조건식2){
		실행문;
	}
}

if(조건식1 && 조건식2){
	실행문;
}

- switch문 
 - 사용하는 변수의 값이 제한적일 때
  - 산술연산 예제, 월의 마지막일 출력 예제
 - 문법

switch(변수나 식){
case 값1:			if(변수 == 값1)
	실행문1;		
	break;
case 값2:			else if(변수 == 값2)
	실행문2;
	break;
default:			else
	실행문3;
}

 - case 값으로는 정수형값과 문자열만 가능
 - ==로는 문자열을 비교할 수 없다

반복문
 - 규칙적인 작업을 반복적으로 할 때 반복문을 사용
 - 규칙과 반복횟수
 - for문, while문, do while문
 - for문 문법
for(1.초기화; 2.5.8.조건식 ; 4.7.증감식){
	3.6.실행문;
}
 - 초기화 : for문 실행 시 1번만 실행, 조건식이나 실행문에서 사용하는 변수를
              초기화, 생략 가능
 - 조건식 : 조건식이 참이면 반복문이 동작, 거짓이면 반복문이 종료
              => 반복문은 조건식이 거짓이 될때까지 반복,
              생략 가능, 생략하면 조건식은 무조건 참으로 판별
 - 증감식 : 조건식, 실행문에서 사용하는 변수를 증가/감소시킴, 생략가능

홍길동 1~10까지 외치라고 함
초기화 : 홍길동 학생이 외칠 숫자를 1로 초기화
조건식 : 홍길동 학생이 외칠 숫자가 10보다 작거나 같을때까지
실행문 : 홍길동 학생이 외칠 숫자를 외침
증감식 : 홍길동 학생이 외칠 숫자를 1증가



♥♥♥♥♥♥♥♥♥4일차♥♥♥♥♥♥♥♥♥♥♥♥


for(1.초기화 ; 2.조건식 ; 4.증감식 ){
	3.실행문
}
1. 초기화 : 변수 초기화, 주로 조건식이나 실행문에서 사용하는 변수를 초기화,
               생략 가능
2. 조건식 : 반복문 동작여부를 결정, 참이면 실행, 거짓이면 반복뭉 종료,
               생략 가능, 생략하면 무조건 참
4. 증감식 : 변수를 증가/감소, 조건식이나 실행문에서 사용하는 변수를 증가/감소,
               생략 가능
반복횟수는 초기화, 조건식, 증감식을 결정해준다
규칙성은 실행문이다
반복문 종료 후는 출력용(확인용)

- break
 - switch문이나 반복문을 빠져 나가게 하는 키워드
 - 반복문에서 break는 if문과 항상 같이 나온다.
   => if문과 같이 안쓰이면 반복문을 안쓴거랑 같기 때문에

- continue
 - 스킵, 특정 위치로 이동
 - for문에서 continue는 증감식 위치로 이동, while문에서 조건식으로 이동
 - 항상 if문과 같이 쓰임
   =>if문 같이 안쓰이면 continue 아래 코드를 지운거랑 같음

중첩 for문(이중 for문)
 - for문의 실행문으로 for문이 오는 경우
for( ; ; ){
	for( ; ; ){
		실행문;
	}
}



♥♥♥♥♥♥♥♥♥5일차♥♥♥♥♥♥♥♥♥♥♥♥


- while문 문법
while(조건식){
	실행문;
}

초기화;
while(조건식){
	실행문;
	증감식;
}
- while문에서 조건식은 생략 불가능
- 모든 반복문은 for으로 표현 가능하다
- 모든 반복문은 while문으로 표현 가능하다
- for문 while문 둘 중에 하나만 잘 써도 된다
- 강사는 주로 반복하는 숫자가 일정하게 증가하거나 반복횟수가 정해져 있는 경우 
  for문을 사용
- 강사는 주로 반복횟수가 정해져 있지 않은 경우 while문을 사용

- do while문 문법

do{
	실행문;
}while(조건식);

 - do while문은 무조건 1번은 됨
 - do while문은 최소 1번은 실행되어야 할 때 사용
 - 영문자 입력 예제

for( ; ; ){
	for( ; ; ){
		if(){
			//아래 break를 만나면 A로 이동
			break;
		}
	}
	//A
}
//B

Label1 : for( ; ; ){
	for( ; ; ){
		if(){
			//아래 break를 만나면 B로 이동
			break Label1;
		}
	}
	//A
}
//B

반복문
- 반복문 종류(for, while, do while)
- 언제 사용? 규칙적인 작업을 반복할 때
- 반복횟수, 규칙성, 반복문 종료 후 작업으로 나눠서 연습

- 참조타입
- 정수형, 실수형, 논리형은 기본타입
- 문자열은 참조타입
- 기본 타입은 값을 저장
- 참조 타입은 주소를 저장
- 기본타입이 아닌 모든 타입은 참조타입이다\
- 참조변수에서 ==와 !=는 주소를 비교하기 때문에 실제 값이 같더라도 주소가 
  다르면 다르다고 판단한다
- 참조변수는 일반적으로 초기값을 null로 지정
- null : 객체를 참조하지 않는다는 의미

- 리터럴 : 1, 'a', 1.23, 실제 값(코드에서 사용하는 값)
- 참조변수 = 주소

- 배열
 - 배열을 생성할 수 있다.
 - 반복문을 이용하여 배열을 관리할 수 있다.

 - 배열 : (같은 의미) + 같은 타입의 변수들을 모아 놓은 것
//아래는 성적이라는 의미로 묶을 수 있기 때문에 배열로 만들어서 사용
int stdScore1, stdScore2, .. stdScore30;
//아래는 타입은 같지만 의미를 묶을 수 없기 때문에 배열로 안만드는것이 낫다
int appleCount, stdScore, age;

 - 배열 선언 방법
타입 배열명[];
타입 [] 배열명;
타입 배열명[] = new 타입[크기];	//추천
타입 배열명[] = {값1, 값2, 값3, ...};
타입 배열명[] = new 타입[]{값1, 값2, 값3, ..};

int array1[] = null;
int []array2 = null;

- 객체 : new 연산자를 통해 만들어진 저장 공간
- 변수 : 일반 타입으로 만들어진 저장 공간
- 배열의 시작 번지는 0번지부터 시작, 마지막번지는 크기-1
- 배열의 값 가져오기
  배열명[번지]
  - 배열의 첫번째 값을 가져오고 싶다
    => 배열의 0번지의 값을 가져오고 싶다
    => 배열명[0]
- 배열의 길이는 배열명.length로 알수 있다

숫자 야구 게임
 - 1 ~ 9 사이의 중복되지 않은 3개의 정수를 랜덤으로 생성
 - B : 숫자는 있지만 위치는 다른 경우
 - S : 숫자도 있고, 위치가 같은 경우
 - O : 일치하는 숫자가 하나도 없는 경우
예시 : 3 9 5
입력 하세요 : 1 2 3
1B
입력 하세요 : 4 5 6
1B
입력하세요 : 3 4 5
2S
입력하세요 : 3 5 9
1S2B
입력하세요 : 6 7 8
O
입력하세요 : 3 9 5
3S
정답입니다.




♥♥♥♥♥♥♥♥♥6일차♥♥♥♥♥♥♥♥♥♥♥♥



1. 변수
 - 목표 : 변수를 선언할 수 있다.
 - 데이터를 관리하기 위해
 - 변수 선언 방법
 - 타입 종류
 - 콘솔 입출력

2. 연산자
 - 목표 : 연산자 종류와 그에 따른 결과를 예측할 수 있다.
 - 산술 연산자 : 숫자(정수, 실수)
 - 비교 연산자 : 논리(참 또는 거짓)
 - 논리 연산자 : 논리(참 또는 거짓)
 - 조건 선택 연산자 : 미정(정수, 실수, 논리, 문자열 다 가능)
 - 증감 연산자 : 숫자
 - 대입 연산자 : 값

3. 조건문
 - 조건문 : 조건문을 사용할 수 있다.
 - 조건문 종류(if문, switch문)
 - ~하면 ...해라
 - ~ : 조건식, ... : 실행문

4. 반복문
 - 목표 : 규칙적으로 반복하는 작업을 반복문으로 만들 수 있다.
 - 반복문 종류 : for, while, do while
 - 반복횟수, 규칙성, 반복문 종류 후로 나누어서 연습

5. 배열
 - 목표 : 배열을 선언하고 사용할 수 있다.
 - 배열 선언 방법
 - 배열 특징
  - 배열의 시작 번지는 0번지
  - 배열의 마지막 번지는 크기-1 번지
 - 배열은 반복문과 같이 사용
 - 많은 변수들을 효율적으로 관리하기 위해 배열을 사용

6. 열거형
 - 목표 : 열거형을 만들고 사용할 수 있다.
 - 상수에 이름을 붙이는 것
 - 열거타입 선언
   enum 열거형명 { 이름1, 이름2, 이름3,... }
 - 열거 타입 변수 선언
   열거형명 변수명;
   열거형명 변수명 = 열거형명.이름1;

자바
 - 객체지향 프로그래밍 언어(OOP)
 - 순서대로 동작
 - 객체에 초점을 맞춤

C언어
 - 절차지향 프로그래밍 언어
  - 순서에 초점을 맞춤

- 설문지를 인쇄

- 절차
  - 인쇄하는 기능을 이용하여 인쇄

- 객체
  - 인쇄를 하기 위한 프린터 설계도(클래스)를 만듬
  - 설계도를 이용하여 프린터(인스턴스, 객체)를 생성
  - 프린터를 이용하여 인쇄

- 클래스
  - 멤버 변수(정보들)
  - 멤버 메소드(기능들)
  - 생성자(초기화)

- 자동차
  - 멤버 변수 : 바퀴 수, 와이퍼갯수, 회사명, 차종, 차명, 시동(켜졌는지 꺼졌는지)
    속력, 기어 등
  - 멤버 메소드 : 시동 켜기, 끄기, 와이퍼 켜기, 끄기, 속력 UP/속력 DOWN 등
  - 생성자 : 바퀴수 4, 와이퍼 갯수 2, 기아, 소형차, k5, 꺼짐, 0, 파킹

- 클래스
  - 클래스 선언
class 클래스명{
	멤버변수들;
	멤버메소드들;
	생성자;
}
  - 클래스명 작성 규칙은 변수명 작성 규칙과 동일
  - 클래스명 작성 관례
    - 클래스명의 첫글자는 대문자

  - 객체 선언
클래스명 객체명;
  - 객체 생성
클래스명 객체명 = new 클래스명();

 - 멤버 변수와 일반 변수의 차이점
   - 일반 변수는 자동으로 초기화 되지 않음
   - 멤버 변수는 자동으로 초기화 됨
 - 멤버 변수 사용
객체명.멤버변수명 = 값;

 - 생성자 
   - 멤버 변수들을 초기화 하는 곳
   - 모든 클래스는 생성자가 필수
   - 클래스에 생성자 코드가 없다면 자동으로 기본 생성자가 추가 됨

 - 기본 생성자 : 클래스에서 생성자가 하나도 없으면 기본 생성자가 자동으로 만들어져서
   호출 됨
public 클래스명(){

}
 - 생성자 
public 클래스명(타입 변수명1, 타입 변수명2, ...){
	멤버변수명1 = 변수명1;
	멤버변수명2 = 변수명2;
	...
}

 - 메소드 : 기능을 모아놓은 코드

음료수 자판기	메소드
돈, 메뉴		매개변수(인자)
음료수		리턴타입

 - 일을 시키려면 제대로된 정보를 전달 => 매개변수

중국집에서 배달
배달		메소드
주소, 메뉴		매개변수
요리		리턴타입

 - 메소드 선언 방법
리턴타입 메소드명(매개변수){
	구현;
	return 값;
}

음료수 음료수자판기(int 돈, String 메뉴){
	구현;
}
 - 리턴타입 : 결과물을 묶을 있는 타입을 씀

 - 메소드 생성 할 때, 다음을 정리
  1. 기능 : 기능을 상세하게 설명
  2. 매개변수 : 기능을 실행하기 위 해 꼭 필요한 정보들을 매개변수로 만듬
  3. 리턴타입 : 기능을 실행 후 알려주는 정보를 리턴타입으로 설정
  4. 메소드명 : 적절한 단어를 이용하여 메소드명을 생성

 - 메소드는 상황에 따라서 return 값이 없을 수 있다
 - 리턴타입이 없는 경우는 void라는 키워드로 대체

 - 메소드의 매개변수는 변수 선언 시 값이 복사가 된다

 - 매개변수가 일반변수인 경우 원본 값이 변하지 않음
 - 매개변수가 참조변수인 경우 원본 값이 변할수 있음
 - 일반변수 : 타입이 기본타입인 경우
                 값을 저장하는 변수
 - 참조변수 : 타입이 기본타입이 아닌 경우, 배열, 열거형, 객체
                 값이 아닌 주소를 저장하는 변수

 - 메소드를 왜 사용하는가?
   - 재사용을 통해 코드의 길이를 줄이기 위해
   - 기능의 유지보수가 쉬워진다
   - 코드의 구조를 파악하기 쉬워진다


